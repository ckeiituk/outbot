"""Miscellaneous slash commands."""

from __future__ import annotations

import random
import traceback
from pathlib import Path
from typing import Optional

import discord
from discord import app_commands
from discord.ext import commands

from bot.utils import notify_admin


class MiscCog(commands.Cog):
    """General-purpose commands that don't fit elsewhere."""

    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

    def _is_admin(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.bot.settings.admin_user_id

    @app_commands.command(name="—Ñ–∏–ª—å–º—ã", description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∏–ª—å–º–∞–º–∏ (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)")
    async def films(self, interaction: discord.Interaction) -> None:
        try:
            if not isinstance(interaction.user, discord.Member):
                await interaction.response.send_message(
                    "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True
                )
                return

            role_name = self.bot.settings.role_movies
            role = discord.utils.get(interaction.user.roles, name=role_name)
            if role is None:
                await interaction.response.send_message(
                    f"–ù—É–∂–Ω–∞ —Ä–æ–ª—å: {role_name}", ephemeral=True
                )
                return

            await interaction.response.send_message(
                f"[–¢–∞–±–ª–∏—Ü–∞ —Å —Ñ–∏–ª—å–º–∞–º–∏]({self.bot.settings.google_sheet_url})",
                ephemeral=True,
            )
        except Exception as exc:
            await notify_admin(self.bot, f"Error in /—Ñ–∏–ª—å–º—ã: {exc}\n{traceback.format_exc()}")
            if not interaction.response.is_done():
                await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)

    @app_commands.command(name="invite", description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
    async def invite(self, interaction: discord.Interaction) -> None:
        try:
            await interaction.response.send_message(
                "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –±–æ—Ç–æ–≤: "
                f"https://discord.gg/{self.bot.settings.invite_code_for_bot_booster}",
                ephemeral=True,
            )
        except Exception as exc:
            await notify_admin(self.bot, f"Error in /invite: {exc}\n{traceback.format_exc()}")
            if not interaction.response.is_done():
                await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)

    @app_commands.command(name="sync", description="–ì–ª–æ–±–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
    async def sync_commands(self, interaction: discord.Interaction) -> None:
        if not self._is_admin(interaction):
            await interaction.response.send_message(
                "You must be the owner to use this command!", ephemeral=True
            )
            return
        try:
            await interaction.response.send_message("Syncing commands globally‚Ä¶", ephemeral=True)
            synced = await self.bot.tree.sync()
            names = [f"/{cmd.name}" for cmd in synced]
            txt = ", ".join(names) if names else "‚Äî (–Ω–µ—Ç –∫–æ–º–∞–Ω–¥)"
            await interaction.followup.send(txt, ephemeral=True)
        except Exception as exc:
            await notify_admin(self.bot, f"Error in /sync: {exc}\n{traceback.format_exc()}")
            if not interaction.response.is_done():
                await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", ephemeral=True)

    @app_commands.command(name="tmdb", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å 4 –ª–æ–∫–∞–ª—å–Ω—ã—Ö PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°")
    @app_commands.describe(user="–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    async def tmdb(self, interaction: discord.Interaction, user: discord.User) -> None:
        image_dir = Path("images")
        image_paths = list(image_dir.glob("*.png"))[:4]
        try:
            await interaction.response.send_message(
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention} –≤ –õ–°‚Ä¶",
                ephemeral=True,
            )

            if not image_paths:
                await interaction.followup.send("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", ephemeral=True)
                return

            for image_path in image_paths:
                try:
                    with image_path.open("rb") as image_file:
                        file = discord.File(image_file, filename=image_path.name)
                        await user.send(file=file)
                except FileNotFoundError:
                    await interaction.followup.send(
                        f"–§–∞–π–ª {image_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {user.mention}.", ephemeral=True,
                    )
            await interaction.followup.send("–ì–æ—Ç–æ–≤–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°.", ephemeral=True)
        except Exception as exc:
            await notify_admin(self.bot, f"Error in /tmdb: {exc}\n{traceback.format_exc()}")
            if not interaction.response.is_done():
                await interaction.response.send_message("An error occurred while sending images.", ephemeral=True)

    @app_commands.command(name="roll", description="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")
    @app_commands.describe(start="–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", end="–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
    async def roll(self, interaction: discord.Interaction, start: int = 1, end: int = 100) -> None:
        try:
            if start > end:
                await interaction.response.send_message(
                    "Invalid interval! Start should be less than or equal to end.",
                    ephemeral=True,
                )
                return
            result = random.randint(start, end)
            await interaction.response.send_message(f"üé≤ You rolled a {result}!")
        except Exception as exc:
            await notify_admin(self.bot, f"Error in /roll: {exc}\n{traceback.format_exc()}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "An error occurred while rolling the number.", ephemeral=True
                )

    @app_commands.command(name="status", description="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    @app_commands.describe(
        state="–°—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è",
        activity_type="–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        text="–¢–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
    )
    @app_commands.choices(
        state=[
            app_commands.Choice(name="–û–Ω–ª–∞–π–Ω", value="online"),
            app_commands.Choice(name="–ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ", value="idle"),
            app_commands.Choice(name="–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", value="dnd"),
            app_commands.Choice(name="–ù–µ–≤–∏–¥–∏–º—ã–π", value="invisible"),
        ],
        activity_type=[
            app_commands.Choice(name="–ò–≥—Ä–∞–µ—Ç", value="playing"),
            app_commands.Choice(name="–°–ª—É—à–∞–µ—Ç", value="listening"),
            app_commands.Choice(name="–°–º–æ—Ç—Ä–∏—Ç", value="watching"),
            app_commands.Choice(name="–°–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è", value="competing"),
        ],
    )
    async def set_status(
        self,
        interaction: discord.Interaction,
        state: app_commands.Choice[str],
        activity_type: Optional[app_commands.Choice[str]] = None,
        text: Optional[str] = None,
    ) -> None:
        if interaction.user.id != self.bot.settings.admin_user_id:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", ephemeral=True)
            return

        try:
            await interaction.response.defer(ephemeral=True, thinking=False)

            status_map = {
                "online": discord.Status.online,
                "idle": discord.Status.idle,
                "dnd": discord.Status.dnd,
                "invisible": discord.Status.invisible,
            }

            activity_map = {
                "playing": discord.ActivityType.playing,
                "listening": discord.ActivityType.listening,
                "watching": discord.ActivityType.watching,
                "competing": discord.ActivityType.competing,
            }

            activity = None
            if activity_type and text:
                activity = discord.Activity(type=activity_map[activity_type.value], name=text)

            await self.bot.change_presence(status=status_map[state.value], activity=activity)

            await interaction.followup.send(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ **{state.name}**"
                + (f", –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: **{text}**" if activity else ""),
                ephemeral=True,
            )
        except Exception as exc:
            msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {exc}\n{traceback.format_exc()}"
            await notify_admin(self.bot, msg)
            try:
                if interaction.response.is_done():
                    await interaction.followup.send(msg, ephemeral=True)
                else:
                    await interaction.response.send_message(msg, ephemeral=True)
            except Exception:
                pass
